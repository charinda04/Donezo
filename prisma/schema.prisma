// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and profile management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  avatar    String?
  password  String? // For credentials auth, null for OAuth users
  karma     Int      @default(0)
  timezone  String   @default("UTC")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User preferences
  preferences Json @default("{}")

  // Relationships
  accounts       Account[]
  sessions       Session[]
  projects       Project[]
  tasks          Task[]
  assignedTasks  Task[]          @relation("TaskAssignee")
  labels         Label[]
  taskComments   TaskComment[]
  projectMembers ProjectMember[]
  activities     Activity[]
  reminders      Reminder[]
  goals          Goal[]

  @@map("users")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Core Donezo models

// Project model for organizing tasks
model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String   @default("#808080")
  icon        String?
  userId      String
  parentId    String?
  order       Int      @default(0)
  isArchived  Boolean  @default(false)
  isFavorite  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent   Project?        @relation("ProjectHierarchy", fields: [parentId], references: [id])
  children Project[]       @relation("ProjectHierarchy")
  tasks    Task[]
  sections Section[]
  members  ProjectMember[]

  @@index([userId])
  @@index([parentId])
  @@map("projects")
}

// Task model - core entity for todos
model Task {
  id          String    @id @default(cuid())
  content     String
  description String?
  priority    Priority  @default(NONE)
  dueDate     DateTime?
  completed   Boolean   @default(false)
  completedAt DateTime?
  projectId   String?
  userId      String
  assigneeId  String?
  parentId    String? // For subtasks
  sectionId   String?
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignee  User?         @relation("TaskAssignee", fields: [assigneeId], references: [id])
  project   Project?      @relation(fields: [projectId], references: [id], onDelete: SetNull)
  parent    Task?         @relation("TaskHierarchy", fields: [parentId], references: [id])
  subtasks  Task[]        @relation("TaskHierarchy")
  section   Section?      @relation(fields: [sectionId], references: [id])
  comments  TaskComment[]
  labels    TaskLabel[]
  reminders Reminder[]

  @@index([userId])
  @@index([projectId])
  @@index([dueDate])
  @@index([completed])
  @@index([parentId])
  @@map("tasks")
}

// Labels for categorizing tasks
model Label {
  id     String @id @default(cuid())
  name   String
  color  String @default("#808080")
  userId String

  // Relationships
  user  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks TaskLabel[]

  @@unique([userId, name])
  @@index([userId])
  @@map("labels")
}

// Many-to-many relationship between tasks and labels
model TaskLabel {
  taskId  String
  labelId String

  task  Task  @relation(fields: [taskId], references: [id], onDelete: Cascade)
  label Label @relation(fields: [labelId], references: [id], onDelete: Cascade)

  @@id([taskId, labelId])
  @@map("task_labels")
}

// Sections for organizing tasks within projects
model Section {
  id        String   @id @default(cuid())
  name      String
  projectId String
  order     Int      @default(0)
  createdAt DateTime @default(now())

  // Relationships
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks   Task[]

  @@index([projectId])
  @@map("sections")
}

// Project collaboration
model ProjectMember {
  id        String      @id @default(cuid())
  projectId String
  userId    String
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime    @default(now())

  // Relationships
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

// Comments on tasks
model TaskComment {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@map("task_comments")
}

// Activity log for audit trail
model Activity {
  id         String     @id @default(cuid())
  userId     String
  action     ActionType
  entityType EntityType
  entityId   String
  metadata   Json       @default("{}")
  createdAt  DateTime   @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([entityType, entityId])
  @@map("activities")
}

// Reminders for tasks
model Reminder {
  id        String       @id @default(cuid())
  taskId    String
  userId    String
  type      ReminderType @default(RELATIVE)
  value     String // JSON string for flexible reminder data
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())

  // Relationships
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@map("reminders")
}

// Goals for productivity tracking
model Goal {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  target      Int // Target number (tasks, karma, etc.)
  current     Int      @default(0)
  type        GoalType @default(TASKS_COMPLETED)
  period      String // daily, weekly, monthly
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("goals")
}

// Enums
enum Priority {
  NONE
  LOW // p4
  MEDIUM // p3
  HIGH // p2
  URGENT // p1
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum ActionType {
  CREATED
  UPDATED
  DELETED
  COMPLETED
  ASSIGNED
  COMMENTED
  SHARED
}

enum EntityType {
  TASK
  PROJECT
  LABEL
  COMMENT
}

enum ReminderType {
  RELATIVE // X minutes before due date
  ABSOLUTE // Specific date/time
  LOCATION // Location-based (future feature)
}

enum GoalType {
  TASKS_COMPLETED
  KARMA_EARNED
  PROJECTS_COMPLETED
  STREAK_DAYS
}
